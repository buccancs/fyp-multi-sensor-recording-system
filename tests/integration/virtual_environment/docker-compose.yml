# Docker Compose configuration for Virtual Test Environment
#
# This provides a complete setup for running virtual tests locally or in CI.
# It includes the main test environment and optional monitoring tools.

version: '3.8'

services:
  # Main virtual test environment
  virtual-test:
    build:
      context: ../../..
      dockerfile: tests/integration/virtual_environment/Dockerfile
    container_name: gsr-virtual-test
    networks:
      - gsr-test-network
    ports:
      - "9000:9000"
    volumes:
      - ./test_results:/app/test_results
      - ./test_configs:/app/configs:ro
    environment:
      - GSR_TEST_HEADLESS=true
      - GSR_TEST_CI_MODE=false
      - GSR_TEST_LOG_LEVEL=INFO
      - GSR_TEST_OUTPUT_DIR=/app/test_results
    command: ["--scenario", "quick", "--devices", "3", "--duration", "3.0", "--verbose"]
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.connect(('localhost',9000)); s.close()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Stress test configuration
  stress-test:
    extends: virtual-test
    container_name: gsr-stress-test
    command: ["--scenario", "stress", "--devices", "6", "--duration", "10.0"]
    profiles: ["stress"]

  # CI test configuration
  ci-test:
    extends: virtual-test
    container_name: gsr-ci-test
    environment:
      - GSR_TEST_HEADLESS=true
      - GSR_TEST_CI_MODE=true
      - GSR_TEST_LOG_LEVEL=WARNING
      - GSR_TEST_OUTPUT_DIR=/app/test_results
      - GSR_TEST_DEVICE_COUNT=3
      - GSR_TEST_DURATION_MINUTES=2.0
    command: ["--scenario", "ci", "--devices", "3", "--duration", "2.0"]
    profiles: ["ci"]

  # Optional: Test result aggregator (for multiple test runs)
  test-aggregator:
    image: python:3.11-slim
    container_name: gsr-test-aggregator
    volumes:
      - ./test_results:/results:ro
      - ./aggregated_results:/output
    working_dir: /results
    command: >
      sh -c "
        pip install --quiet jq || true &&
        find . -name '*_report.json' -exec cat {} \\; > /output/all_reports.json &&
        echo 'Test results aggregated in /output/all_reports.json'
      "
    profiles: ["aggregate"]
    depends_on:
      - virtual-test

networks:
  gsr-test-network:
    driver: bridge
    name: gsr-test-network

volumes:
  test_results:
    driver: local
  aggregated_results:
    driver: local