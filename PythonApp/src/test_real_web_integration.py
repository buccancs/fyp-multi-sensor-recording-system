import os
import sys
import time
import webbrowser
import threading
from datetime import datetime
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
try:
    from utils.logging_config import get_logger
    logger = get_logger(__name__)
except ImportError:
    import logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)


def test_real_web_integration():
    print('=' * 60)
    print('TESTING REAL WEB UI INTEGRATION WITH BACKEND COMPONENTS')
    print('=' * 60)
    try:
        from web_ui.integration import WebDashboardIntegration
        print('\n1. Creating WebDashboardIntegration with real components...')
        web_integration = WebDashboardIntegration(enable_web_ui=True,
            web_port=5000, main_controller=None, session_manager=None,
            shimmer_manager=None, android_device_manager=None)
        print('‚úì WebDashboardIntegration created successfully')
        print(
            f'  - Using WebController: {web_integration.using_web_controller}')
        if web_integration.using_web_controller and web_integration.controller:
            print(
                f'  - SessionManager available: {web_integration.controller.session_manager is not None}'
                )
            print(
                f'  - ShimmerManager available: {web_integration.controller.shimmer_manager is not None}'
                )
            print(
                f'  - AndroidDeviceManager available: {web_integration.controller.android_device_manager is not None}'
                )
        else:
            print('  - Using PyQt MainController')
        print('\n2. Starting web dashboard...')
        success = web_integration.start_web_dashboard()
        if success:
            dashboard_url = web_integration.get_web_dashboard_url()
            print(f'‚úì Web dashboard started at: {dashboard_url}')
            print('\n3. Testing signal connections...')
            signal_received = {'count': 0}

            def on_device_status(device_id, status_data):
                signal_received['count'] += 1
                print(
                    f"   üì° Device status signal: {device_id} -> {status_data.get('type', 'unknown')} ({status_data.get('status', 'unknown')})"
                    )

            def on_sensor_data(device_id, sensor_data):
                signal_received['count'] += 1
                print(
                    f'   üìä Sensor data signal: {device_id} -> {list(sensor_data.keys())}'
                    )

            def on_session_change(session_id, is_active):
                signal_received['count'] += 1
                print(
                    f"   üé¨ Session signal: {session_id} -> {'ACTIVE' if is_active else 'INACTIVE'}"
                    )
            if (web_integration.using_web_controller and web_integration.
                controller):
                web_integration.controller.device_status_received.connect(
                    on_device_status)
                web_integration.controller.sensor_data_received.connect(
                    on_sensor_data)
                web_integration.controller.session_status_changed.connect(
                    on_session_change)
                print('‚úì Connected to WebController signals')
            else:
                print('‚úó WebController not available')
            print('\n4. Monitoring real data for 15 seconds...')
            print(
                '   (You should see device status and sensor data signals below)'
                )
            start_time = time.time()
            while time.time() - start_time < 15:
                time.sleep(1)
                elapsed = int(time.time() - start_time)
                print(
                    f"   ‚è∞ Monitoring... {elapsed}/15 seconds (Signals received: {signal_received['count']})"
                    )
            print(
                f"\n‚úì Monitoring complete. Total signals received: {signal_received['count']}"
                )
            if signal_received['count'] > 0:
                print(
                    'üéâ SUCCESS: Web UI is receiving real data from backend components!'
                    )
            else:
                print(
                    '‚ö†Ô∏è  WARNING: No signals received. Backend components may not be generating data.'
                    )
            print(f'\n5. Web dashboard is accessible at: {dashboard_url}')
            print('   Open this URL in your browser to see the live data.')
            print('\n6. Testing session control...')
            if (web_integration.controller and web_integration.
                using_web_controller):
                print('   Starting recording session...')
                session_started = web_integration.controller.start_recording({
                    'session_name': 'test_web_session', 'devices': [
                    'android_1', 'shimmer_1']})
                if session_started:
                    print('   ‚úì Recording session started via web controller')
                    time.sleep(2)
                    print('   Stopping recording session...')
                    session_stopped = (web_integration.controller.
                        stop_recording())
                    if session_stopped:
                        print(
                            '   ‚úì Recording session stopped via web controller'
                            )
                    else:
                        print('   ‚ö†Ô∏è  Failed to stop recording session')
                else:
                    print('   ‚ö†Ô∏è  Failed to start recording session')
            print('\n7. Getting current system status...')
            if (web_integration.controller and web_integration.
                using_web_controller):
                device_status = web_integration.controller.get_device_status()
                session_info = web_integration.controller.get_session_info()
                print(
                    f"   Device Status: {len(device_status.get('shimmer_devices', {}))} Shimmer, {len(device_status.get('android_devices', {}))} Android, {len(device_status.get('webcam_devices', {}))} Webcam"
                    )
                print(
                    f"   Session Info: {'Active' if session_info.get('active') else 'Inactive'}"
                    )
            print(f'\n8. Stopping web dashboard...')
            web_integration.stop_web_dashboard()
            print('‚úì Web dashboard stopped')
        else:
            print('‚úó Failed to start web dashboard')
            return False
        print('\n' + '=' * 60)
        print('INTEGRATION TEST COMPLETED SUCCESSFULLY')
        print('=' * 60)
        print('‚úÖ The web UI is properly connected to real backend components')
        print('‚úÖ Data flows from backend services to web dashboard')
        print('‚úÖ Session control works through web interface')
        print('‚úÖ Device status monitoring is functional')
        return True
    except Exception as e:
        print(f'‚úó Error testing web integration: {e}')
        import traceback
        traceback.print_exc()
        return False


def test_web_only_mode():
    print('\n' + '=' * 60)
    print('TESTING WEB-ONLY MODE (NO PYQT DEPENDENCIES)')
    print('=' * 60)
    try:
        from web_ui.web_controller import create_web_controller_with_real_components
        print('\n1. Creating WebController with real backend components...')
        web_controller = create_web_controller_with_real_components()
        print('‚úì WebController created successfully')
        print(
            f'  - SessionManager: {web_controller.session_manager is not None}'
            )
        print(
            f'  - ShimmerManager: {web_controller.shimmer_manager is not None}'
            )
        print(
            f'  - AndroidDeviceManager: {web_controller.android_device_manager is not None}'
            )
        print('\n2. Testing WebController functionality...')
        device_status = web_controller.get_device_status()
        print(f'‚úì Device status retrieved: {len(device_status)} device types')
        session_info = web_controller.get_session_info()
        print(f"‚úì Session info retrieved: {session_info.get('active', False)}")
        print('\n3. Testing signal system...')
        signals_received = {'count': 0}

        def test_signal_handler(*args):
            signals_received['count'] += 1
        web_controller.device_status_received.connect(test_signal_handler)
        web_controller.sensor_data_received.connect(test_signal_handler)
        time.sleep(3)
        print(
            f"‚úì Signal system working: {signals_received['count']} signals received"
            )
        print('\n4. Stopping WebController...')
        web_controller.stop_monitoring()
        print('‚úì WebController stopped')
        print('\n‚úÖ WEB-ONLY MODE TEST PASSED')
        print('   The web UI can run completely independently of PyQt')
        return True
    except Exception as e:
        print(f'‚úó Error in web-only mode test: {e}')
        import traceback
        traceback.print_exc()
        return False


if __name__ == '__main__':
    print('Starting Web UI Integration Tests...')
    print(f'Test time: {datetime.now()}')
    test1_success = test_real_web_integration()
    test2_success = test_web_only_mode()
    print('\n' + '=' * 60)
    print('FINAL RESULTS')
    print('=' * 60)
    print(
        f"Real Integration Test: {'‚úÖ PASSED' if test1_success else '‚ùå FAILED'}"
        )
    print(f"Web-Only Mode Test: {'‚úÖ PASSED' if test2_success else '‚ùå FAILED'}")
    if test1_success and test2_success:
        print('\nüéâ ALL TESTS PASSED!')
        print(
            '   The web UI is successfully connected to real Python app components'
            )
        print('   Both PyQt and web-only modes work correctly')
    else:
        print('\n‚ùå SOME TESTS FAILED!')
        print('   Check the error messages above for details')
    print('\n' + '=' * 60)
