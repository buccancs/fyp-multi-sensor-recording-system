[pytest]
# Unified Test Configuration for Multi-Sensor Recording System
# Consolidates configuration from pytest.ini and pyproject.toml

testpaths = tests_unified
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

addopts =
    -v
    --tb=short
    --strict-config
    --strict-markers
    --disable-warnings
    --junitxml=test_results/junit.xml
    --maxfail=10
    --durations=10
    --cov=PythonApp
    --cov-report=html:test_results/htmlcov
    --cov-report=xml:test_results/coverage.xml
    --cov-report=term-missing:skip-covered

markers =
    # Test levels (primary organization)
    unit: marks tests as unit tests (Level 1: Component Testing)
    integration: marks tests as integration tests (Level 2: Cross-Component Testing)
    system: marks tests as system tests (Level 3: End-to-End Testing)
    performance: marks tests as performance tests (Level 4: Performance & Quality)
    evaluation: marks tests as evaluation/research validation tests

    # Test speeds and execution modes
    slow: marks tests as slow (deselect with '-m "not slow"')
    quick: marks tests for quick validation runs
    
    # Technology and platform markers
    android: marks tests as Android-specific tests
    gui: marks tests that require GUI components
    network: marks tests that require network connectivity
    hardware: marks tests that require physical hardware
    hardware_loop: marks tests as hardware-in-the-loop tests
    browser: marks tests as cross-browser compatibility tests
    
    # Test types and purposes
    e2e: marks tests as end-to-end tests
    visual: marks tests as visual regression tests
    load: marks tests as load/stress tests
    security: marks tests as security validation tests
    privacy: marks tests as privacy compliance tests
    accessibility: marks tests as accessibility compliance tests
    
    # Execution environments
    virtual_env: marks tests as virtual environment tests
    appium: marks tests as Appium-based tests
    
    # Quality and compliance
    research: marks tests for research-grade validation
    compliance: marks tests for compliance checking
    benchmarks: marks tests as performance benchmarks
    
    # UI and frontend
    theme: marks tests as theme/styling tests
    responsive: marks tests as responsive design tests
    components: marks tests as UI component tests
    
    # Specialized testing
    concurrent: marks tests as concurrency tests
    stress: marks tests as stress tests
    memory: marks tests as memory usage tests
    endurance: marks tests for long-running stability

minversion = 7.0

# Required plugins for comprehensive testing
required_plugins =
    pytest-cov>=4.0.0
    pytest-html>=3.0.0
    pytest-xdist>=3.0.0
    pytest-mock>=3.10.0
    pytest-benchmark>=4.0.0
    pytest-asyncio>=0.21.0

asyncio_mode = auto

# Filter warnings to focus on test results
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Test discovery patterns
# Include all test files in the unified structure
testpaths = 
    tests_unified
    
# Exclude certain directories from test discovery
norecursedirs = 
    .git 
    .tox 
    dist 
    build 
    *.egg
    __pycache__
    .pytest_cache
    node_modules
    venv
    env

# Collection configuration
collect_ignore = [
    "tests_unified/fixtures/deprecated",
    "tests_unified/config/templates"
]

# Timeout configuration for different test types
timeout = 300  # Default timeout in seconds

# Coverage configuration
[coverage:run]
source = PythonApp
omit =
    */tests/*
    */test_*
    */venv/*
    */env/*
    */.tox/*
    */site-packages/*
    */build/*
    */dist/*
    */__pycache__/*

branch = true
concurrency = multiprocessing

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

show_missing = true
skip_covered = false
precision = 2

# Quality thresholds
fail_under = 50

[coverage:html]
directory = test_results/htmlcov
title = Multi-Sensor Recording System Test Coverage

[coverage:xml]
output = test_results/coverage.xml