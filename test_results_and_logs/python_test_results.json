{
  "test_run_timestamp": "2025-08-05T22:55:24.128641",
  "python_version": "3.12.3 (main, Jun 18 2025, 17:59:45) [GCC 13.3.0]",
  "working_directory": "/home/runner/work/bucika_gsr/bucika_gsr",
  "test_results": {
    "test_calibration_comprehensive": {
      "tests_run": 15,
      "failures": 0,
      "errors": 0,
      "skipped": 15,
      "success": true,
      "failure_details": [],
      "error_details": [],
      "skipped_details": [
        "(<test_calibration_comprehensive.TestCalibrationIntegration testMethod=test_calibration_error_handling>, 'Full calibration stack required')",
        "(<test_calibration_comprehensive.TestCalibrationIntegration testMethod=test_complete_calibration_pipeline>, 'Full calibration stack required')",
        "(<test_calibration_comprehensive.TestCalibrationManager testMethod=test_calibration_manager_initialization>, 'Calibration modules not available')",
        "(<test_calibration_comprehensive.TestCalibrationManager testMethod=test_calibration_persistence>, 'Calibration modules not available')",
        "(<test_calibration_comprehensive.TestCalibrationManager testMethod=test_calibration_validation>, 'Calibration modules not available')",
        "(<test_calibration_comprehensive.TestCalibrationManager testMethod=test_calibration_workflow>, 'Calibration modules not available')",
        "(<test_calibration_comprehensive.TestCalibrationManager testMethod=test_session_management>, 'Calibration modules not available')",
        "(<test_calibration_comprehensive.TestCalibrationProcessor testMethod=test_calibration_calculation>, 'OpenCV and calibration modules required')",
        "(<test_calibration_comprehensive.TestCalibrationProcessor testMethod=test_calibration_processor_initialization>, 'OpenCV and calibration modules required')",
        "(<test_calibration_comprehensive.TestCalibrationProcessor testMethod=test_pattern_detection>, 'OpenCV and calibration modules required')",
        "(<test_calibration_comprehensive.TestCalibrationProcessor testMethod=test_stereo_calibration>, 'OpenCV and calibration modules required')",
        "(<test_calibration_comprehensive.TestCalibrationResult testMethod=test_calibration_result_creation>, 'Calibration modules not available')",
        "(<test_calibration_comprehensive.TestCalibrationResult testMethod=test_calibration_result_file_operations>, 'Calibration modules not available')",
        "(<test_calibration_comprehensive.TestCalibrationResult testMethod=test_calibration_result_serialization>, 'Calibration modules not available')",
        "(<test_calibration_comprehensive.TestCalibrationResult testMethod=test_calibration_result_validation>, 'Calibration modules not available')"
      ]
    },
    "test_network_comprehensive": {
      "tests_run": 26,
      "failures": 0,
      "errors": 0,
      "skipped": 26,
      "success": true,
      "failure_details": [],
      "error_details": [],
      "skipped_details": [
        "(<test_network_comprehensive.TestDeviceClient testMethod=test_client_connection>, 'Network modules not available')",
        "(<test_network_comprehensive.TestDeviceClient testMethod=test_device_client_initialization>, 'Network modules not available')",
        "(<test_network_comprehensive.TestDeviceClient testMethod=test_hello_message_sending>, 'Network modules not available')",
        "(<test_network_comprehensive.TestDeviceClient testMethod=test_message_receiving>, 'Network modules not available')",
        "(<test_network_comprehensive.TestDeviceClient testMethod=test_message_sending>, 'Network modules not available')",
        "(<test_network_comprehensive.TestEnhancedDeviceServer testMethod=test_connection_resilience>, 'Network modules not available')",
        "(<test_network_comprehensive.TestEnhancedDeviceServer testMethod=test_enhanced_device_server_initialization>, 'Network modules not available')",
        "(<test_network_comprehensive.TestEnhancedDeviceServer testMethod=test_load_balancing>, 'Network modules not available')",
        "(<test_network_comprehensive.TestEnhancedDeviceServer testMethod=test_performance_monitoring>, 'Network modules not available')",
        "(<test_network_comprehensive.TestEnhancedDeviceServer testMethod=test_priority_message_handling>, 'Network modules not available')",
        "(<test_network_comprehensive.TestJsonSocketServer testMethod=test_device_registration_and_management>, 'Network modules not available')",
        "(<test_network_comprehensive.TestJsonSocketServer testMethod=test_json_socket_server_initialization>, 'Network modules not available')",
        "(<test_network_comprehensive.TestJsonSocketServer testMethod=test_message_broadcasting>, 'Network modules not available')",
        "(<test_network_comprehensive.TestJsonSocketServer testMethod=test_message_creation_and_validation>, 'Network modules not available')",
        "(<test_network_comprehensive.TestJsonSocketServer testMethod=test_server_socket_setup>, 'Network modules not available')",
        "(<test_network_comprehensive.TestJsonSocketServer testMethod=test_session_file_collection>, 'Network modules not available')",
        "(<test_network_comprehensive.TestNetworkIntegration testMethod=test_client_server_communication>, 'Network modules not available')",
        "(<test_network_comprehensive.TestNetworkIntegration testMethod=test_error_handling_and_recovery>, 'Network modules not available')",
        "(<test_network_comprehensive.TestNetworkIntegration testMethod=test_multi_device_coordination>, 'Network modules not available')",
        "(<test_network_comprehensive.TestPCServer testMethod=test_hello_message_processing>, 'Network modules not available')",
        "(<test_network_comprehensive.TestPCServer testMethod=test_pc_server_initialization>, 'Network modules not available')",
        "(<test_network_comprehensive.TestPCServer testMethod=test_sensor_data_aggregation>, 'Network modules not available')",
        "(<test_network_comprehensive.TestPCServer testMethod=test_synchronization_commands>, 'Network modules not available')",
        "(<test_network_comprehensive.TestRemoteDevice testMethod=test_remote_device_creation>, 'Network modules not available')",
        "(<test_network_comprehensive.TestRemoteDevice testMethod=test_remote_device_metrics>, 'Network modules not available')",
        "(<test_network_comprehensive.TestRemoteDevice testMethod=test_remote_device_status_tracking>, 'Network modules not available')"
      ]
    },
    "test_session_comprehensive": {
      "tests_run": 24,
      "failures": 0,
      "errors": 0,
      "skipped": 24,
      "success": true,
      "failure_details": [],
      "error_details": [],
      "skipped_details": [
        "(<test_session_comprehensive.TestSessionLogger testMethod=test_event_tracking>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionLogger testMethod=test_global_session_logger>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionLogger testMethod=test_log_file_rotation>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionLogger testMethod=test_performance_monitoring>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionLogger testMethod=test_session_logger_initialization>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionLogger testMethod=test_structured_logging>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionManager testMethod=test_concurrent_session_access>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionManager testMethod=test_session_creation>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionManager testMethod=test_session_directory_structure>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionManager testMethod=test_session_manager_initialization>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionManager testMethod=test_session_metadata_management>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionManager testMethod=test_session_persistence>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionManager testMethod=test_session_termination>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionRecovery testMethod=test_automatic_recovery_detection>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionRecovery testMethod=test_data_integrity_validation>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionRecovery testMethod=test_incremental_backup_strategy>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionRecovery testMethod=test_session_backup_creation>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionRecovery testMethod=test_session_state_restoration>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionSynchronizer testMethod=test_device_registration>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionSynchronizer testMethod=test_priority_message_handling>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionSynchronizer testMethod=test_session_synchronizer_initialization>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionSynchronizer testMethod=test_synchronization_recovery>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionSynchronizer testMethod=test_synchronization_sequence>, 'Session modules not available')",
        "(<test_session_comprehensive.TestSessionSynchronizer testMethod=test_timing_coordination>, 'Session modules not available')"
      ]
    },
    "test_shimmer_comprehensive": {
      "tests_run": 14,
      "failures": 0,
      "errors": 0,
      "skipped": 14,
      "success": true,
      "failure_details": [],
      "error_details": [],
      "skipped_details": [
        "(<test_shimmer_comprehensive.TestShimmerIntegration testMethod=test_complete_recording_session>, 'Shimmer modules not available')",
        "(<test_shimmer_comprehensive.TestShimmerIntegration testMethod=test_device_failure_recovery>, 'Shimmer modules not available')",
        "(<test_shimmer_comprehensive.TestShimmerManager testMethod=test_connection_recovery>, 'Shimmer modules not available')",
        "(<test_shimmer_comprehensive.TestShimmerManager testMethod=test_data_collection>, 'Shimmer modules not available')",
        "(<test_shimmer_comprehensive.TestShimmerManager testMethod=test_data_streaming_start>, 'Shimmer modules not available')",
        "(<test_shimmer_comprehensive.TestShimmerManager testMethod=test_device_connection>, 'Shimmer modules not available')",
        "(<test_shimmer_comprehensive.TestShimmerManager testMethod=test_device_discovery>, 'Shimmer modules not available')",
        "(<test_shimmer_comprehensive.TestShimmerManager testMethod=test_multi_device_connection>, 'Shimmer modules not available')",
        "(<test_shimmer_comprehensive.TestShimmerManager testMethod=test_synchronization_timing>, 'Shimmer modules not available')",
        "(<test_shimmer_comprehensive.TestShimmerPCApp testMethod=test_communication_setup>, 'Shimmer modules not available')",
        "(<test_shimmer_comprehensive.TestShimmerPCApp testMethod=test_cross_device_coordination>, 'Shimmer modules not available')",
        "(<test_shimmer_comprehensive.TestShimmerPCApp testMethod=test_data_buffering>, 'Shimmer modules not available')",
        "(<test_shimmer_comprehensive.TestShimmerPCApp testMethod=test_data_processing_pipeline>, 'Shimmer modules not available')",
        "(<test_shimmer_comprehensive.TestShimmerPCApp testMethod=test_error_handling>, 'Shimmer modules not available')"
      ]
    },
    "test_gui_comprehensive": {
      "tests_run": 23,
      "failures": 0,
      "errors": 0,
      "skipped": 23,
      "success": true,
      "failure_details": [],
      "error_details": [],
      "skipped_details": [
        "(<test_gui_comprehensive.TestDemoUIManager testMethod=test_demo_initialization>, 'GUI modules not available')",
        "(<test_gui_comprehensive.TestDemoUIManager testMethod=test_interactive_features_demo>, 'GUI modules not available')",
        "(<test_gui_comprehensive.TestDemoUIManager testMethod=test_simulation_mode>, 'GUI modules not available')",
        "(<test_gui_comprehensive.TestDemoUIManager testMethod=test_tutorial_system>, 'GUI modules not available')",
        "(<test_gui_comprehensive.TestEnhancedMainApplication testMethod=test_application_initialization>, 'GUI modules not available')",
        "(<test_gui_comprehensive.TestEnhancedMainApplication testMethod=test_calibration_workflow_integration>, 'GUI modules not available')",
        "(<test_gui_comprehensive.TestEnhancedMainApplication testMethod=test_device_management_panel>, 'GUI modules not available')",
        "(<test_gui_comprehensive.TestEnhancedMainApplication testMethod=test_error_dialog_system>, 'GUI modules not available')",
        "(<test_gui_comprehensive.TestEnhancedMainApplication testMethod=test_menu_system>, 'GUI modules not available')",
        "(<test_gui_comprehensive.TestEnhancedMainApplication testMethod=test_real_time_data_display>, 'GUI modules not available')",
        "(<test_gui_comprehensive.TestEnhancedMainApplication testMethod=test_session_control_integration>, 'GUI modules not available')",
        "(<test_gui_comprehensive.TestEnhancedMainApplication testMethod=test_settings_persistence>, 'GUI modules not available')",
        "(<test_gui_comprehensive.TestGUIIntegration testMethod=test_complete_gui_workflow>, 'GUI modules not available')",
        "(<test_gui_comprehensive.TestGUIIntegration testMethod=test_cross_component_communication>, 'GUI modules not available')",
        "(<test_gui_comprehensive.TestGUIIntegration testMethod=test_error_propagation>, 'GUI modules not available')",
        "(<test_gui_comprehensive.TestGUIIntegration testMethod=test_responsive_design_adaptation>, 'GUI modules not available')",
        "(<test_gui_comprehensive.TestWebUIManager testMethod=test_api_routes_registration>, 'GUI or Flask modules not available')",
        "(<test_gui_comprehensive.TestWebUIManager testMethod=test_calibration_web_interface>, 'GUI or Flask modules not available')",
        "(<test_gui_comprehensive.TestWebUIManager testMethod=test_device_control_api>, 'GUI or Flask modules not available')",
        "(<test_gui_comprehensive.TestWebUIManager testMethod=test_flask_app_initialization>, 'GUI or Flask modules not available')",
        "(<test_gui_comprehensive.TestWebUIManager testMethod=test_real_time_data_broadcast>, 'GUI or Flask modules not available')",
        "(<test_gui_comprehensive.TestWebUIManager testMethod=test_session_management_api>, 'GUI or Flask modules not available')",
        "(<test_gui_comprehensive.TestWebUIManager testMethod=test_websocket_setup>, 'GUI or Flask modules not available')"
      ]
    },
    "test_hand_segmentation_comprehensive": {
      "tests_run": 27,
      "failures": 0,
      "errors": 0,
      "skipped": 27,
      "success": true,
      "failure_details": [],
      "error_details": [],
      "skipped_details": [
        "(<test_hand_segmentation_comprehensive.TestHandDetector testMethod=test_bounding_box_calculation>, 'Hand segmentation or CV2 modules not available')",
        "(<test_hand_segmentation_comprehensive.TestHandDetector testMethod=test_confidence_filtering>, 'Hand segmentation or CV2 modules not available')",
        "(<test_hand_segmentation_comprehensive.TestHandDetector testMethod=test_detector_initialization>, 'Hand segmentation or CV2 modules not available')",
        "(<test_hand_segmentation_comprehensive.TestHandDetector testMethod=test_hand_detection_multiple_hands>, 'Hand segmentation or CV2 modules not available')",
        "(<test_hand_segmentation_comprehensive.TestHandDetector testMethod=test_hand_detection_single_hand>, 'Hand segmentation or CV2 modules not available')",
        "(<test_hand_segmentation_comprehensive.TestHandDetector testMethod=test_hand_orientation_detection>, 'Hand segmentation or CV2 modules not available')",
        "(<test_hand_segmentation_comprehensive.TestHandSegmentationCLI testMethod=test_argument_parsing>, 'Hand segmentation modules not available')",
        "(<test_hand_segmentation_comprehensive.TestHandSegmentationCLI testMethod=test_batch_processing>, 'Hand segmentation modules not available')",
        "(<test_hand_segmentation_comprehensive.TestHandSegmentationCLI testMethod=test_output_format_options>, 'Hand segmentation modules not available')",
        "(<test_hand_segmentation_comprehensive.TestHandSegmentationCLI testMethod=test_parameter_validation>, 'Hand segmentation modules not available')",
        "(<test_hand_segmentation_comprehensive.TestHandSegmentationCLI testMethod=test_progress_reporting>, 'Hand segmentation modules not available')",
        "(<test_hand_segmentation_comprehensive.TestHandSegmentationIntegration testMethod=test_complete_segmentation_pipeline>, 'Hand segmentation modules not available')",
        "(<test_hand_segmentation_comprehensive.TestHandSegmentationIntegration testMethod=test_error_recovery_scenarios>, 'Hand segmentation modules not available')",
        "(<test_hand_segmentation_comprehensive.TestHandSegmentationIntegration testMethod=test_real_time_processing_simulation>, 'Hand segmentation modules not available')",
        "(<test_hand_segmentation_comprehensive.TestHandTracker testMethod=test_hand_disappearance_handling>, 'Hand segmentation modules not available')",
        "(<test_hand_segmentation_comprehensive.TestHandTracker testMethod=test_hand_reidentification>, 'Hand segmentation modules not available')",
        "(<test_hand_segmentation_comprehensive.TestHandTracker testMethod=test_hand_tracking_update>, 'Hand segmentation modules not available')",
        "(<test_hand_segmentation_comprehensive.TestHandTracker testMethod=test_new_hand_registration>, 'Hand segmentation modules not available')",
        "(<test_hand_segmentation_comprehensive.TestHandTracker testMethod=test_tracker_initialization>, 'Hand segmentation modules not available')",
        "(<test_hand_segmentation_comprehensive.TestHandTracker testMethod=test_velocity_estimation>, 'Hand segmentation modules not available')",
        "(<test_hand_segmentation_comprehensive.TestSegmentationProcessor testMethod=test_adaptive_thresholding>, 'Hand segmentation or CV2 modules not available')",
        "(<test_hand_segmentation_comprehensive.TestSegmentationProcessor testMethod=test_contour_detection>, 'Hand segmentation or CV2 modules not available')",
        "(<test_hand_segmentation_comprehensive.TestSegmentationProcessor testMethod=test_hand_mask_generation>, 'Hand segmentation or CV2 modules not available')",
        "(<test_hand_segmentation_comprehensive.TestSegmentationProcessor testMethod=test_image_preprocessing>, 'Hand segmentation or CV2 modules not available')",
        "(<test_hand_segmentation_comprehensive.TestSegmentationProcessor testMethod=test_morphological_operations>, 'Hand segmentation or CV2 modules not available')",
        "(<test_hand_segmentation_comprehensive.TestSegmentationProcessor testMethod=test_multi_hand_segmentation>, 'Hand segmentation or CV2 modules not available')",
        "(<test_hand_segmentation_comprehensive.TestSegmentationProcessor testMethod=test_segmentation_quality_assessment>, 'Hand segmentation or CV2 modules not available')"
      ]
    },
    "test_time_sync_comprehensive": {
      "tests_run": 21,
      "failures": 0,
      "errors": 0,
      "skipped": 21,
      "success": true,
      "failure_details": [],
      "error_details": [],
      "skipped_details": [
        "(<test_time_sync_comprehensive.TestCrossDeviceTimeSynchronization testMethod=test_device_discovery_for_sync>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestCrossDeviceTimeSynchronization testMethod=test_master_device_selection>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestCrossDeviceTimeSynchronization testMethod=test_sync_drift_correction>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestCrossDeviceTimeSynchronization testMethod=test_synchronization_failure_recovery>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestCrossDeviceTimeSynchronization testMethod=test_synchronized_recording_session>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestCrossDeviceTimeSynchronization testMethod=test_timing_precision_measurement>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestMasterClockSynchronizer testMethod=test_drift_compensation>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestMasterClockSynchronizer testMethod=test_local_clock_adjustment>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestMasterClockSynchronizer testMethod=test_multiple_server_synchronization>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestMasterClockSynchronizer testMethod=test_ntp_server_query>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestMasterClockSynchronizer testMethod=test_sync_error_handling>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestMasterClockSynchronizer testMethod=test_synchronization_accuracy_validation>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestMasterClockSynchronizer testMethod=test_synchronization_statistics>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestMasterClockSynchronizer testMethod=test_synchronizer_initialization>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestNTPTimeServer testMethod=test_client_rate_limiting>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestNTPTimeServer testMethod=test_ntp_packet_creation>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestNTPTimeServer testMethod=test_ntp_response_generation>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestNTPTimeServer testMethod=test_ntp_server_initialization>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestNTPTimeServer testMethod=test_server_start_stop>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestNTPTimeServer testMethod=test_server_statistics_tracking>, 'Time synchronization modules not available')",
        "(<test_time_sync_comprehensive.TestNTPTimeServer testMethod=test_time_source_validation>, 'Time synchronization modules not available')"
      ]
    },
    "consolidated_tests": {
      "tests_run": 1,
      "failures": 0,
      "errors": 1,
      "skipped": 0,
      "success": false,
      "failure_details": [],
      "error_details": [
        "(<unittest.loader._FailedTest testMethod=consolidated_tests>, 'ImportError: Failed to import test module: consolidated_tests\\nTraceback (most recent call last):\\n  File \"/usr/lib/python3.12/unittest/loader.py\", line 394, in _find_test_path\\n    module = self._get_module_from_name(name)\\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File \"/usr/lib/python3.12/unittest/loader.py\", line 337, in _get_module_from_name\\n    __import__(name)\\n  File \"/home/runner/work/bucika_gsr/bucika_gsr/PythonApp/tests/consolidated_tests.py\", line 39, in <module>\\n    import cv2\\nModuleNotFoundError: No module named \\'cv2\\'\\n\\n')"
      ],
      "skipped_details": []
    }
  },
  "summary": {
    "total_tests": 151,
    "total_failures": 0,
    "total_errors": 1,
    "total_skipped": 150,
    "success_rate": 99.33774834437085,
    "overall_success": false
  }
}