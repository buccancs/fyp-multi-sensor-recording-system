name: Enhanced Code Quality Monitoring

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly quality analysis
    - cron: '0 2 * * 1'

env:
  PYTHON_VERSION: '3.9'
  JAVA_VERSION: '17'

jobs:
  python-quality-metrics:
    name: Python Code Quality & Metrics
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/test-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r test-requirements.txt
        pip install radon xenon complexity-report || echo "::warning::Some quality tools failed to install"

    - name: Run complete Python linting
      run: |
        # Create necessary directories
        mkdir -p quality-reports
        
        echo "::group::Black formatting check"
        black --check --diff PythonApp/ || echo "::warning::Code formatting issues found"
        echo "::endgroup::"
        
        echo "::group::isort import sorting check"
        isort --check-only --diff PythonApp/ || echo "::warning::Import sorting issues found"
        echo "::endgroup::"
        
        echo "::group::flake8 style check"
        flake8 PythonApp/ --output-file=quality-reports/flake8-report.txt || true
        echo "::endgroup::"
        
        echo "::group::pylint analysis"
        pylint PythonApp/ --output-format=json > quality-reports/pylint-report.json || true
        echo "::endgroup::"

    - name: Generate Python complexity metrics
      run: |
        mkdir -p quality-reports/complexity
        
        echo "::group::Cyclomatic complexity analysis"
        radon cc PythonApp/ --json > quality-reports/complexity/cyclomatic-complexity.json
        radon cc PythonApp/ --show-complexity --min=C
        echo "::endgroup::"
        
        echo "::group::Maintainability index"
        radon mi PythonApp/ --json > quality-reports/complexity/maintainability-index.json
        radon mi PythonApp/ --show --min=B
        echo "::endgroup::"
        
        echo "::group::Halstead complexity"
        radon hal PythonApp/ --json > quality-reports/complexity/halstead-complexity.json
        echo "::endgroup::"
        
        echo "::group::Raw metrics"
        radon raw PythonApp/ --json > quality-reports/complexity/raw-metrics.json
        echo "::endgroup::"

    - name: Check complexity thresholds
      run: |
        echo "::group::Complexity threshold validation"
        # Check for functions with complexity > 15 (matching detekt threshold)
        xenon --max-absolute C --max-modules B --max-average A PythonApp/ || {
          echo "⚠️ Code complexity exceeds recommended thresholds"
          echo "Functions should have complexity < 15 (per project guidelines)"
          exit 1
        }
        echo "::endgroup::"

    - name: Security analysis
      run: |
        echo "::group::Security vulnerability scan"
        bandit -r PythonApp/ -f json -o quality-reports/security-report.json || true
        bandit -r PythonApp/ -ll
        echo "::endgroup::"

    - name: Type checking
      run: |
        echo "::group::MyPy static type analysis"
        mypy PythonApp/ --json-report quality-reports/mypy-report || true
        echo "::endgroup::"

    - name: Technical Debt Audit
      run: |
        echo "::group::Technical Debt Audit"
        
        # Create necessary directories
        mkdir -p quality-reports/tech-debt
        mkdir -p audit_reports
        
        # Run tech debt audit if script exists
        if [ -f "scripts/tech_debt_audit.py" ]; then
          python scripts/tech_debt_audit.py --report --category python || echo "::warning::Tech debt audit failed"
          
          # Copy audit report to quality reports directory
          cp audit_reports/tech_debt_audit_*.md quality-reports/tech-debt/ 2>/dev/null || echo "::warning::No audit reports to copy"
          
          # Generate summary metrics for CI
          python scripts/tech_debt_audit.py --category python --format=json > quality-reports/tech-debt/python-debt-metrics.json 2>/dev/null || echo "::warning::Failed to generate debt metrics"
        else
          echo "::warning::Tech debt audit script not found, skipping"
        fi
        
        echo "::endgroup::"

    - name: Upload Python quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: python-quality-reports
        path: quality-reports/
        retention-days: 30

  kotlin-quality-metrics:
    name: Kotlin Code Quality & Metrics
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable and prevent cache corruption
      run: |
        chmod +x ./gradlew
        
        # Clear potentially corrupted caches
        ./gradlew --stop || true
        rm -rf ~/.gradle/caches/*/dependencies-accessors/ || true
        
        # Test Gradle setup
        ./gradlew --version --no-daemon

    - name: Run Detekt analysis
      run: |
        mkdir -p quality-reports/kotlin
        echo "::group::Detekt static analysis"
        ./gradlew detekt --no-daemon || true
        cp AndroidApp/build/reports/detekt/detekt.xml quality-reports/kotlin/ || true
        cp AndroidApp/build/reports/detekt/detekt.html quality-reports/kotlin/ || true
        echo "::endgroup::"

    - name: Generate Kotlin metrics report
      run: |
        echo "::group::Kotlin complexity metrics"
        # Use detekt's complexity report
        ./gradlew detektBaseline --no-daemon || true
        
        # Extract complexity metrics from detekt report
        if [ -f "AndroidApp/build/reports/detekt/detekt.xml" ]; then
          python3 -c 'import xml.etree.ElementTree as ET, json, sys; tree = ET.parse("AndroidApp/build/reports/detekt/detekt.xml"); root = tree.getroot(); complexity_issues = [{"file": error.get("filename", ""), "line": error.get("line", ""), "rule": error.get("source", ""), "message": error.get("message", "")} for error in root.findall(".//error") if "Complex" in error.get("source", "")]; metrics = {"total_complexity_issues": len(complexity_issues), "complexity_violations": complexity_issues, "threshold_compliant": len(complexity_issues) == 0}; json.dump(metrics, open("quality-reports/kotlin/complexity-metrics.json", "w"), indent=2); print(f"Generated Kotlin complexity metrics: {len(complexity_issues)} issues found")' || echo "Error generating complexity metrics"
        echo "::endgroup::"

    - name: Upload Kotlin quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: kotlin-quality-reports
        path: quality-reports/kotlin/
        retention-days: 30

  complete-quality-dashboard:
    name: Quality Dashboard & Trend Analysis
    runs-on: ubuntu-latest
    needs: [python-quality-metrics, kotlin-quality-metrics]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download quality reports
      uses: actions/download-artifact@v4
      with:
        path: downloaded-reports/

    - name: Set up Python for analysis
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Generate quality dashboard
      run: |
        pip install jinja2 matplotlib plotly
        

        python3 scripts/generate_dashboard.py

    - name: Upload quality dashboard
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-dashboard
        path: |
          quality-dashboard.html
          quality-metrics.json
        retention-days: 90

    - name: Comment PR with quality metrics
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const qualityData = JSON.parse(fs.readFileSync('quality-metrics.json', 'utf8'));
            
            const comment = `## 🔍 Code Quality Report
            
            **Overall Quality Score:** ${qualityData.overall_score.toFixed(1)}/10.0
            
            ### 📊 Key Metrics
            - **Python Code:** ${qualityData.python_metrics ? '✅ Analysed' : '❌ No metrics'}
            - **Kotlin Code:** ${qualityData.kotlin_metrics ? '✅ Analysed' : '❌ No metrics'}
            - **Complexity Compliance:** ${qualityData.overall_score > 7 ? '✅ PASS' : '⚠️ NEEDS REVIEW'}
            
            ### 🎯 Recommendations
            ${qualityData.overall_score > 8 ? '✅ Code quality is excellent!' : ''}
            ${qualityData.overall_score <= 8 && qualityData.overall_score > 6 ? '🔧 Consider refactoring complex functions (target: <15 complexity)' : ''}
            ${qualityData.overall_score <= 6 ? '⚠️ Significant quality improvements needed. Please review complexity and add documentation.' : ''}
            
            <details>
            <summary>📋 Quality Standards Checklist</summary>
            
            - [ ] All functions have complexity < 15
            - [ ] Maintainability index > B grade
            - [ ] No security vulnerabilities detected
            - [ ] Type hints present where applicable
            - [ ] Documentation for complex logic
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not create quality report comment:', error.message);
          }