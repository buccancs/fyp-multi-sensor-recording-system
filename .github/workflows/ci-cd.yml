name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  PYTHON_VERSION_DEFAULT: '3.10'
  JAVA_VERSION: '17'

jobs:
  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml', '**/test-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r test-requirements.txt
    
    - name: Lint with flake8 (non-blocking)
      run: |
        flake8 PythonApp/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "::warning::Syntax errors found but continuing CI"
        flake8 PythonApp/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black (non-blocking)
      run: |
        black --check --diff PythonApp/ || echo "::warning::Code formatting issues found but continuing CI"
    
    - name: Check import sorting with isort (non-blocking)
      run: |
        isort --check-only --diff PythonApp/ || echo "::warning::Import sorting issues found but continuing CI"
    
    - name: Run Python tests
      run: |
        # Create coverage directory
        mkdir -p htmlcov
        
        # Run unified testing framework
        if [ -f "tests_unified/runners/run_unified_tests.py" ]; then
          echo "Running unified test framework..."
          python tests_unified/runners/run_unified_tests.py --mode ci || echo "::warning::Some unified tests failed"
        else
          echo "::warning::Unified test framework not found, falling back to legacy tests"
          
          # Fallback to legacy tests if unified framework not available
          if [ -d "tests/" ]; then
            pytest tests/ -v --tb=short || echo "::warning::Some tests in tests/ failed"
          fi
          
          # Run specific test files that exist
          if [ -f "PythonApp/system_test.py" ]; then
            python PythonApp/system_test.py || echo "::warning::System test failed"
          fi
          
          # Try to run any other test files
          find PythonApp/ -name "test_*.py" -exec python {} \; || echo "::warning::Some individual test files failed"
        fi
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == env.PYTHON_VERSION_DEFAULT
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: python
        name: python-coverage
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  android-build:
    name: Android Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Make gradlew executable and clear corrupted caches
      run: |
        chmod +x ./gradlew
        
        # Clear any potentially corrupted Gradle caches
        ./gradlew --stop || true
        rm -rf ~/.gradle/caches/*/dependencies-accessors/ || true
        
        # Test Gradle setup
        ./gradlew --version --no-daemon

    - name: Generate build constants
      run: ./gradlew generateConstants --no-daemon

    - name: Lint Android code
      run: ./gradlew lintDevDebug --continue --no-daemon || echo "::warning::Android linting completed with issues"

    - name: Run Detekt static analysis
      run: ./gradlew detekt --no-daemon

    - name: Build Android app
      run: ./gradlew assembleDevDebug --continue --no-daemon || echo "::warning::Android build completed with issues"

    - name: Run Android unit tests
      run: ./gradlew testDevDebugUnitTest --continue --no-daemon || echo "::warning::Some Android unit tests failed"

    - name: Generate test coverage report
      run: ./gradlew jacocoTestReport --continue --no-daemon || echo "::warning::Coverage report generation failed"
    
    - name: Upload Android coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./AndroidApp/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
        flags: android
        name: android-coverage
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

    - name: Upload Android build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: android-build-reports
        path: |
          AndroidApp/build/reports/
        retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [python-tests, android-build]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION_DEFAULT }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r test-requirements.txt
    
    - name: Run integration tests
      run: |
        # Run unified integration tests
        if [ -f "tests_unified/runners/run_unified_tests.py" ]; then
          echo "Running unified integration tests..."
          python tests_unified/runners/run_unified_tests.py --level integration --mode ci || echo "::warning::Some integration tests failed"
        else
          echo "::warning::Unified test framework not found, falling back to legacy integration tests"
          
          # Fallback to legacy tests
          if [ -d "tests/" ]; then
            pytest tests/ -m "integration" -v --tb=short || echo "::warning::Some integration tests failed"
          else
            echo "::warning::No tests directory found, skipping integration tests"
          fi
        fi
    
    - name: Run system tests
      run: |
        # Run unified system tests
        if [ -f "tests_unified/runners/run_unified_tests.py" ]; then
          echo "Running unified system tests..."
          python tests_unified/runners/run_unified_tests.py --level system --mode ci || echo "::warning::System tests failed"
        else
          echo "::warning::Unified test framework not found, falling back to legacy system tests"
          
          if [ -f "PythonApp/system_test.py" ]; then
            python PythonApp/system_test.py || echo "::warning::System tests failed"
          else
            echo "::warning::System test file not found, skipping"
          fi
        fi

  requirements-validation:
    name: Requirements Validation
    runs-on: ubuntu-latest
    needs: [python-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION_DEFAULT }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r test-requirements.txt
    
    - name: Validate Functional Requirements (FR) Testing
      run: |
        if [ -f "tests_unified/runners/run_unified_tests.py" ]; then
          echo "Validating FR coverage through unified testing framework..."
          python tests_unified/runners/run_unified_tests.py --category evaluation --mode research --validate-requirements || echo "::warning::FR validation completed with issues"
        else
          echo "::warning::Unified test framework not found - manual FR validation required"
        fi
    
    - name: Validate Non-Functional Requirements (NFR) Testing
      run: |
        if [ -f "tests_unified/runners/run_unified_tests.py" ]; then
          echo "Validating NFR coverage through performance and quality tests..."
          python tests_unified/runners/run_unified_tests.py --level performance --mode research || echo "::warning::NFR validation completed with issues"
        else
          echo "::warning::Unified test framework not found - manual NFR validation required"
        fi
    
    - name: Generate Requirements Traceability Report
      run: |
        if [ -f "tests_unified/runners/run_unified_tests.py" ]; then
          echo "Generating requirements traceability report..."
          python tests_unified/runners/run_unified_tests.py --report-requirements-coverage --output-format json > requirements_coverage.json || echo "::warning::Requirements report generation failed"
          
          # Check if report was generated and contains data
          if [ -f "requirements_coverage.json" ]; then
            echo "Requirements coverage report generated successfully"
            cat requirements_coverage.json | head -20
          else
            echo "::warning::Requirements coverage report not generated"
          fi
        else
          echo "::warning::Unified test framework not found - cannot generate requirements report"
        fi
    
    - name: Upload requirements validation artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: requirements-validation-reports
        path: |
          requirements_coverage.json
          tests_unified/reports/
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [python-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION_DEFAULT }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security analysis with bandit
      run: |
        bandit -r PythonApp/ -f json -o bandit-report.json || true
        bandit -r PythonApp/ -ll
    
    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30