name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  PYTHON_VERSION_DEFAULT: '3.9'
  JAVA_VERSION: '17'

jobs:
  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml', '**/test-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r test-requirements.txt
    
    - name: Lint with flake8
      run: |
        flake8 PythonApp/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 PythonApp/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff PythonApp/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff PythonApp/
    
    - name: Run Python tests
      run: |
        pytest tests/ PythonApp/ -v --cov=PythonApp --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == env.PYTHON_VERSION_DEFAULT
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: python-coverage

  android-build:
    name: Android Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Make gradlew executable
      run: chmod +x ./gradlew
    
    - name: Generate build constants
      run: ./gradlew generateConstants
    
    - name: Lint Android code
      run: ./gradlew lintDebug
    
    - name: Run Detekt static analysis
      run: ./gradlew detekt
    
    - name: Build Android app
      run: ./gradlew assembleDebug
    
    - name: Run Android unit tests
      run: ./gradlew testDebugUnitTest
    
    - name: Generate test coverage report
      run: ./gradlew jacocoTestReport
    
    - name: Upload Android coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./AndroidApp/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
        flags: android
        name: android-coverage

    - name: Upload Android build artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: android-build-reports
        path: |
          AndroidApp/build/reports/
        retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [python-tests, android-build]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION_DEFAULT }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r test-requirements.txt
    
    - name: Run integration tests
      run: |
        pytest tests/ -m "integration" -v --tb=short
    
    - name: Run system tests
      run: |
        python PythonApp/system_test.py

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [python-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION_DEFAULT }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security analysis with bandit
      run: |
        bandit -r PythonApp/ -f json -o bandit-report.json || true
        bandit -r PythonApp/ -ll
    
    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30