name: Security and Privacy Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security scans on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - dependencies
        - privacy
        - quick

env:
  PYTHON_VERSION: '3.9'
  JAVA_VERSION: '17'

jobs:
  security-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better security analysis
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Set up JDK for Android
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Install Python security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit pytest pytest-cov cryptography
        
        # Install project dependencies
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f test-requirements.txt ]; then pip install -r test-requirements.txt; fi
        pip install PyQt5 pyyaml toml  # Additional dependencies for security tools
    
    - name: Run Python dependency vulnerability scan
      id: python-deps
      run: |
        echo "🐍 Running Python dependency vulnerability scan..."
        
        # Run Safety scan
        safety scan --json > safety-report.json || true
        
        # Run our custom dependency scanner
        python PythonApp/production/dependency_scanner.py || true
        
        # Check for critical vulnerabilities
        if [ -f safety-report.json ]; then
          CRITICAL_COUNT=$(python -c "
        import json
        try:
            with open('safety-report.json') as f:
                data = json.load(f)
            critical = sum(1 for v in data.get('vulnerabilities', []) if v.get('severity') == 'critical')
            print(critical)
        except:
            print(0)
        " 2>/dev/null || echo "0")
          echo "critical_vulnerabilities=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        else
          echo "critical_vulnerabilities=0" >> $GITHUB_OUTPUT
        fi
    
    - name: Run Python code security analysis
      id: python-security
      run: |
        echo "🔍 Running Python code security analysis..."
        
        # Run Bandit security linter
        bandit -r PythonApp/ -f json -o bandit-report.json || true
        
        # Run our complete security scanner
        python PythonApp/production/security_scanner.py || true
        
        # Check for high-severity issues
        if [ -f bandit-report.json ]; then
          HIGH_ISSUES=$(python -c "
        import json
        try:
            with open('bandit-report.json') as f:
                data = json.load(f)
            high_issues = sum(1 for r in data.get('results', []) if r.get('issue_severity') == 'HIGH')
            print(high_issues)
        except:
            print(0)
        " 2>/dev/null || echo "0")
          echo "high_security_issues=$HIGH_ISSUES" >> $GITHUB_OUTPUT
        else
          echo "high_security_issues=0" >> $GITHUB_OUTPUT
        fi
    
    - name: Run runtime security validation
      id: runtime-security
      continue-on-error: true
      run: |
        echo "🔒 Running runtime security validation..."
        
        # Run runtime security checks
        python -c "
        import sys
        sys.path.insert(0, '.')
        from PythonApp.production.runtime_security_checker import validate_runtime_security
        try:
            validate_runtime_security()
            print('RUNTIME_SECURITY_PASSED=true')
        except Exception as e:
            print(f'RUNTIME_SECURITY_PASSED=false')
            print(f'RUNTIME_SECURITY_ERROR={str(e)}')
        " > runtime-security-result.txt
        
        # Extract results
        PASSED=$(grep "RUNTIME_SECURITY_PASSED" runtime-security-result.txt | cut -d'=' -f2)
        ERROR=$(grep "RUNTIME_SECURITY_ERROR" runtime-security-result.txt | cut -d'=' -f2 || echo "")
        
        echo "runtime_security_passed=$PASSED" >> $GITHUB_OUTPUT
        echo "runtime_security_error=$ERROR" >> $GITHUB_OUTPUT
    
    - name: Run privacy compliance tests
      id: privacy-tests
      run: |
        echo "🔐 Running privacy compliance tests..."
        
        # Run privacy-specific tests
        python -m pytest tests/security/test_privacy_compliance.py -v --tb=short --json-report --json-report-file=privacy-test-report.json || true
        
        # Run TLS authentication tests
        python -m pytest tests/security/test_tls_authentication.py -v --tb=short || true
        
        # Check test results
        if [ -f privacy-test-report.json ]; then
          FAILED_TESTS=$(python -c "
        import json
        try:
            with open('privacy-test-report.json') as f:
                data = json.load(f)
            failed = data.get('summary', {}).get('failed', 0)
            print(failed)
        except:
            print(0)
        " 2>/dev/null || echo "0")
          echo "failed_privacy_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
        else
          echo "failed_privacy_tests=0" >> $GITHUB_OUTPUT
        fi
    
    - name: Android security analysis
      id: android-security
      run: |
        echo "🤖 Running Android security analysis..."
        
        # Check for Android security issues
        if [ -d "AndroidApp" ]; then
          # Look for common Android security issues
          SECURITY_ISSUES=0
          
          # Check for hardcoded credentials in Android files
          if grep -r "password\|secret\|key" AndroidApp/src/ --include="*.kt" --include="*.java" | grep -v "example\|test\|BuildConfig" > android-creds.txt; then
            SECURITY_ISSUES=$((SECURITY_ISSUES + $(wc -l < android-creds.txt)))
          fi
          
          # Check for insecure Android configurations
          if grep -r "android:allowBackup=\"true\"\|android:debuggable=\"true\"" AndroidApp/ > android-config.txt; then
            SECURITY_ISSUES=$((SECURITY_ISSUES + $(wc -l < android-config.txt)))
          fi
          
          echo "android_security_issues=$SECURITY_ISSUES" >> $GITHUB_OUTPUT
        else
          echo "android_security_issues=0" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate security summary
      id: security-summary
      run: |
        echo "📊 Generating security summary..."
        
        # Create complete security report
        cat > security-summary.md << EOF
        # Security Validation Summary
        
        ## 🔍 Scan Results
        
        | Check | Status | Issues Found |
        |-------|--------|--------------|
        | Python Dependencies | ${{ steps.python-deps.outputs.critical_vulnerabilities == '0' && '✅ Pass' || '❌ Fail' }} | ${{ steps.python-deps.outputs.critical_vulnerabilities }} critical vulnerabilities |
        | Python Code Security | ${{ steps.python-security.outputs.high_security_issues == '0' && '✅ Pass' || '❌ Fail' }} | ${{ steps.python-security.outputs.high_security_issues }} high-severity issues |
        | Runtime Security | ${{ steps.runtime-security.outputs.runtime_security_passed == 'true' && '✅ Pass' || '❌ Fail' }} | ${{ steps.runtime-security.outputs.runtime_security_error }} |
        | Privacy Compliance | ${{ steps.privacy-tests.outputs.failed_privacy_tests == '0' && '✅ Pass' || '❌ Fail' }} | ${{ steps.privacy-tests.outputs.failed_privacy_tests }} failed tests |
        | Android Security | ${{ steps.android-security.outputs.android_security_issues == '0' && '✅ Pass' || '❌ Fail' }} | ${{ steps.android-security.outputs.android_security_issues }} security issues |
        
        ## 📋 Recommendations
        
        EOF
        
        # Add specific recommendations based on findings
        if [ "${{ steps.python-deps.outputs.critical_vulnerabilities }}" != "0" ]; then
          echo "- 🚨 **CRITICAL**: Update Python dependencies with critical vulnerabilities immediately" >> security-summary.md
        fi
        
        if [ "${{ steps.python-security.outputs.high_security_issues }}" != "0" ]; then
          echo "- ⚠️ **HIGH**: Review and fix high-severity code security issues" >> security-summary.md
        fi
        
        if [ "${{ steps.runtime-security.outputs.runtime_security_passed }}" != "true" ]; then
          echo "- 🔒 **SECURITY**: Fix runtime security configuration issues" >> security-summary.md
        fi
        
        if [ "${{ steps.privacy-tests.outputs.failed_privacy_tests }}" != "0" ]; then
          echo "- 🔐 **PRIVACY**: Address failing privacy compliance tests" >> security-summary.md
        fi
        
        if [ "${{ steps.android-security.outputs.android_security_issues }}" != "0" ]; then
          echo "- 🤖 **ANDROID**: Fix Android security configuration issues" >> security-summary.md
        fi
        
        # Determine overall status
        TOTAL_ISSUES=$((
          ${{ steps.python-deps.outputs.critical_vulnerabilities }} + 
          ${{ steps.python-security.outputs.high_security_issues }} + 
          ${{ steps.privacy-tests.outputs.failed_privacy_tests }} + 
          ${{ steps.android-security.outputs.android_security_issues }}
        ))
        
        if [ "${{ steps.runtime-security.outputs.runtime_security_passed }}" != "true" ]; then
          TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
        fi
        
        echo "total_security_issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
        
        if [ "$TOTAL_ISSUES" -eq 0 ]; then
          echo "✅ All security checks passed!" >> security-summary.md
          echo "overall_status=success" >> $GITHUB_OUTPUT
        else
          echo "❌ $TOTAL_ISSUES security issues found - action required" >> security-summary.md
          echo "overall_status=failure" >> $GITHUB_OUTPUT
        fi
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          security_reports/
          *.json
          *.txt
          security-summary.md
        retention-days: 30
    
    - name: Comment on PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔒 Security Validation Results\n\n${summary}`
          });
    
    - name: Fail job if critical security issues found
      if: steps.security-summary.outputs.overall_status == 'failure'
      run: |
        echo "❌ Security validation failed with ${{ steps.security-summary.outputs.total_security_issues }} issues"
        echo "Please review the security report and fix the issues before merging"
        exit 1
    
    - name: Success notification
      if: steps.security-summary.outputs.overall_status == 'success'
      run: |
        echo "✅ All security checks passed successfully!"
        echo "The code is ready for deployment from a security perspective"