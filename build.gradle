
plugins {
    id 'com.android.application' version '8.7.3' apply false
    id 'com.android.library' version '8.7.3' apply false
    id 'org.jetbrains.kotlin.android' version '2.0.20' apply false
    id 'com.google.devtools.ksp' version '2.0.20-1.0.24' apply false
    id 'com.google.dagger.hilt.android' version '2.52' apply false
}

tasks.register('assembleAll') {
    group = 'build'
    description = 'Builds Android APK and runs Python tests'

    dependsOn ':AndroidApp:assembleDebug'
    dependsOn 'pythonTest'

    doLast {
        println "✓ All components assembled successfully"
        println "  - Android APK: ${project(':AndroidApp').buildDir}/outputs/apk/debug/"
        println "  - Python tests completed"
    }
}

tasks.register('pythonTest', Exec) {
    group = 'verification'
    description = 'Runs Python tests using pytest'

    workingDir file('PythonApp')

    def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
    def pythonExe = isWindows ? 'python.exe' : 'python'
    def scriptsDir = isWindows ? 'Scripts' : 'bin'

    def condaEnvPath = System.getenv('CONDA_PREFIX')
    if (condaEnvPath && file("${condaEnvPath}/${scriptsDir}/${pythonExe}").exists()) {
        commandLine "${condaEnvPath}/${scriptsDir}/${pythonExe}", '-m', 'pytest', 'tests/', '-v'
    } else if (file("PythonApp/venv/${scriptsDir}/${pythonExe}").exists()) {
        commandLine "PythonApp/venv/${scriptsDir}/${pythonExe}", '-m', 'pytest', 'tests/', '-v'
    } else {
        commandLine pythonExe, '-m', 'pytest', 'tests/', '-v'
    }

    ignoreExitValue = true

    doFirst {
        println "Running Python tests..."
    }

    doLast {
        if (executionResult.get().exitValue == 0) {
            println "✓ Python tests passed"
        } else {
            println "⚠ Python tests failed or not found (exit code: ${executionResult.get().exitValue})"
        }
    }
}

tasks.register('setupPythonEnv', Exec) {
    group = 'setup'
    description = 'Sets up Python conda environment from environment.yml'

    workingDir file('.')

    def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
    def condaCmd = isWindows ? 'conda.exe' : 'conda'

    commandLine condaCmd, 'env', 'create', '-f', 'environment.yml', '--force'
    ignoreExitValue = true

    doFirst {
        println "Setting up Python conda environment..."
    }

    doLast {
        if (executionResult.get().exitValue == 0) {
            println "✓ Conda environment created successfully"
        } else {
            println "⚠ Failed to create conda environment (exit code: ${executionResult.get().exitValue})"
            println "  Make sure conda is installed and environment.yml exists"
        }
    }
}

tasks.register('codeQuality') {
    group = 'verification'
    description = 'Runs code quality checks for both Android and Python'

    dependsOn ':AndroidApp:lintDebug'
    dependsOn 'pythonLint'

    doLast {
        println "✓ Code quality checks completed"
    }
}

tasks.register('pythonLint', Exec) {
    group = 'verification'
    description = 'Runs Python linting with flake8'

    workingDir file('PythonApp')

    def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
    def pythonExe = isWindows ? 'python.exe' : 'python'
    def scriptsDir = isWindows ? 'Scripts' : 'bin'

    def condaEnvPath = System.getenv('CONDA_PREFIX')
    if (condaEnvPath && file("${condaEnvPath}/${scriptsDir}/${pythonExe}").exists()) {
        commandLine "${condaEnvPath}/${scriptsDir}/${pythonExe}", '-m', 'flake8', 'src/', '--max-line-length=88'
    } else {
        commandLine pythonExe, '-m', 'flake8', 'src/', '--max-line-length=88'
    }

    ignoreExitValue = true

    doFirst {
        println "Running Python linting..."
    }

    doLast {
        if (executionResult.get().exitValue == 0) {
            println "✓ Python linting passed"
        } else {
            println "⚠ Python linting issues found (exit code: ${executionResult.get().exitValue})"
        }
    }
}

tasks.register('buildRelease') {
    group = 'build'
    description = 'Builds release versions of all components'

    dependsOn ':AndroidApp:assembleRelease'
    dependsOn 'pythonPackage'

    doLast {
        println "✓ Release build completed"
    }
}

tasks.register('pythonPackage', Exec) {
    group = 'build'
    description = 'Packages Python application using PyInstaller'

    workingDir file('PythonApp')

    def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
    def pythonExe = isWindows ? 'python.exe' : 'python'
    def scriptsDir = isWindows ? 'Scripts' : 'bin'

    def condaEnvPath = System.getenv('CONDA_PREFIX')
    if (condaEnvPath && file("${condaEnvPath}/${scriptsDir}/${pythonExe}").exists()) {
        commandLine "${condaEnvPath}/${scriptsDir}/${pythonExe}", '-m', 'PyInstaller', 'src/main.py', '--onefile', '--windowed'
    } else {
        commandLine pythonExe, '-m', 'PyInstaller', 'src/main.py', '--onefile', '--windowed'
    }

    ignoreExitValue = true

    doFirst {
        println "Packaging Python application..."
    }

    doLast {
        if (executionResult.get().exitValue == 0) {
            println "✓ Python application packaged successfully"
        } else {
            println "⚠ Python packaging failed (exit code: ${executionResult.get().exitValue})"
        }
    }
}

def createTestTask = { taskName, description, scriptName ->
    tasks.register(taskName, Exec) {
        group = 'testing'
        description = description
        workingDir file('.')

        def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
        def pythonExe = isWindows ? 'python.exe' : 'python'

        commandLine pythonExe, scriptName
        ignoreExitValue = true

        doFirst {
            println "Running ${description}..."
        }

        doLast {
            def status = executionResult.get().exitValue == 0 ? "✓ passed" : "⚠ failed (exit code: ${executionResult.get().exitValue})"
            println "${description} ${status}"
        }
    }
}

createTestTask('runRecordingFullTest', 'Recording Functionality Full Test Suite', 'test_recording_full_suite.py')
createTestTask('runDeviceManagementFullTest', 'Device Management Full Test Suite', 'test_device_management_full_suite.py')
createTestTask('runCalibrationFullTest', 'Calibration Full Test Suite', 'test_calibration_full_suite.py')
createTestTask('runFileManagementFullTest', 'File Management Full Test Suite', 'test_file_management_full_suite.py')
createTestTask('runNetworkConnectivityFullTest', 'Network Connectivity Full Test Suite', 'test_network_connectivity_full_suite.py')

createTestTask('runAllFullTestSuites', 'All Full Test Suites using orchestrator', 'test_all_full_suites.py')
createTestTask('runIDEIntegrationTest', 'IDE Integration Test Suite', 'test_ide_integration_suite.py')

tasks.register('runPythonUITest', Exec) {
    group = 'testing'
    description = 'Runs Python UI Integration Test standalone'
    workingDir file('PythonApp')

    def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
    def pythonExe = isWindows ? 'python.exe' : 'python'

    commandLine pythonExe, 'test_python_ui_integration.py'
    ignoreExitValue = true

    doFirst { println "Running Python UI Integration Test..." }
    doLast {
        def status = executionResult.get().exitValue == 0 ? "✓ passed" : "⚠ failed (exit code: ${executionResult.get().exitValue})"
        println "Python UI Test ${status}"
    }
}

tasks.register('runIDEIntegrationUITest', Exec) {
    group = 'testing'
    description = 'Runs Android IDE Integration UI Test standalone'
    workingDir file('.')

    commandLine './gradlew', ':AndroidApp:connectedAndroidTest', '-Pandroid.testInstrumentationRunnerArguments.class=com.multisensor.recording.IDEIntegrationUITest'
    ignoreExitValue = true

    doFirst { println "Running Android IDE Integration UI Test..." }
    doLast {
        def status = executionResult.get().exitValue == 0 ? "✓ passed" : "⚠ failed (exit code: ${executionResult.get().exitValue})"
        println "Android UI Test ${status}"
    }
}

tasks.register('clean', Delete) {
    delete rootProject.buildDir
}
